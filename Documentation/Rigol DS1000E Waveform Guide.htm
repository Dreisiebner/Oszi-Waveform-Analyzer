<!DOCTYPE html>
<html>
<body>
<div>The DS1052E/D series of oscilloscopes are capable of returning a number of different sizes of data sets.</div>

<div style="margin-left: 40px;">•Displayed data is 600 points</div>

<div style="margin-left: 40px;">•In Stop mode, Normal Acquisition you can return 8k, 16k, 512k, or1M points depending on how the scope is configured.</div>
<br>In this article, we are going to 
describe how to format the returned data for each case. The returned 
data is formatted as unsigned decimal bytes. In order to interpret the 
data, we put together the following guide to make it easy to covert the 
unsigned bytes to ASCII characters. After the conversion, you can then 
view and manipulate the data in the more traditional format of Volts vs.
 Time format.<br>Command Strings are enclosed in quotes “” and comments are denoted by '/'.<br>
 
<p><hr> <br><u><b>For 600 points:</b></u>
 While the scope is in run mode, which is indicated by a green LED 
lighting the Stop/Run button, the scope will only return 610 data points
 that represent the displayed data on the scope LCD.

<div style="margin-left: 40px;"><br>NOTE:
 The first iteration of a data query, or request, performed in stop 
mode, indicated by a red Run/Stop button will also return 610 data 
points.</div>
<br><u><b>Step 1: Retrieve Scope Settings</b></u><br>Some setup information is used in the data conversion later. Therefore, we must query the scope to get the proper parameters.
<div style="margin-left: 40px;">•“:TIM:SCAL?” /Return current time/division setting =&lt;Time_Div&gt;<br>•“:CHAN1:SCAL?” /Return Channel 1 scale = &lt;Vert_Offset&gt;  &nbsp; <font color=red><b>EVERYTHING FROM RIGOL IS BUGGY, EVEN THIS DOCUMENT!</b></font></div>

<div style="margin-left: 160px;">/Alternately, you can replace CHAN1 with CHAN2, if</div>

<div style="margin-left: 160px;">/that is the channel of interest.</div>

<div style="margin-left: 40px;">•“:CHAN1:OFFS?” /Return Channel vertical offset = &lt;Vert_Offset&gt;</div>

<div style="margin-left: 160px;">/Alternately, you can replace CHAN1 with CHAN2, if</div>

<div style="margin-left: 160px;">/that is the channel of interest.</div>

<div style="margin-left: 40px;">•“:TIM:OFFS?” /Return current trigger offset = &lt;Time_Offset&gt;</div>

<div style="margin-left: 160px;">&nbsp;</div>
<br><u><b>Step 2: Retrieve Data and Convert</b></u><br>&nbsp;
<div style="margin-left: 40px;">•“:WAV:DATA? CHAN1” /Return data. You will need to read the data</div>

<div style="margin-left: 200px;">/string into your program.</div>

<div style="margin-left: 40px;">•Convert the string to a byte array<br>•Remove
 the first 10 data points from the raw data. These contain unused header
 information. There should be 600 points remaining.<br>&nbsp;</div>

<div style="margin-left: 40px;">NOTE: 
When read as unsigned decimals, each byte should have a value of between
 15 and 240. The top of the LCD display of the scope represents byte 
value 25 and the bottom is 225.
</div>

<p>
<div><u><b>Step 3: Convert Amplitude (Volts) :</b></u>
 For each point in the byte array, we will need to perform a 
mathematical manipulation. To do so, you will need the following 
variables:</div>

<div style="margin-left: 40px;">•&lt;Volts_Div&gt;: Returned time/div value from scope<br>•&lt;Raw_Byte&gt; : Raw byte from array<br>•&lt;Vert_Offset&gt;: Returned Vertical offset value from scope</div>

<div><br>For each point, to get the amplitude (A) of the waveform in volts (V):<br><br><i>A(V) = [(240 - &lt;Raw_Byte&gt;) * (&lt;Volts_Div&gt; / 25) - [(&lt;Vert_Offset&gt; + &lt;Volts_Div&gt; * 4.6)]]</i><br><br><u><b>Step 4: Convert Time (s) :</b></u>
 For each point in the byte array, we will need to perform a 
mathematical manipulation. To do so, you will need the following 
variables:</div>

<div style="margin-left: 40px;">•&lt;Time_Offset&gt;: Returned Time offset value from scope<br>•&lt;Time_Div&gt;: Returned time/div value from scope<br>•&lt;PT_Num&gt;: The index of the byte array value of interest. There should be 600 points after removing the 10 point header.</div>

<div><br>To get time in seconds, for each point:<br><br><i>T(s) = (&lt;Pt_Num&gt; - 1) * (&lt;Time_Div&gt; / 50) - [(&lt;Time_Div&gt; * 6) - &lt;Time_Offset&gt;]</i><br><br>Finally, you can then store or graph the converted data.

<p><hr>

<br><u><b>For data sets &gt;600 points:</b></u>
 When the scope is in stop mode, which is indicated by a red LED 
lighting the Stop/Run button, the scope will return 610 data points the 
first query. Subsequent queries will return data sets of 8k, 16k, 512k, 
or 1M points depending on the configuration.<br>&nbsp;</div>

<div style="margin-left: 40px;">NOTE: 
The first iteration of a data query, or request, performed in stop mode,
 indicated by a red Run/Stop button, will also return 610 data points. 
You can simply write these values to an unused storage location or 
delete them. <font color=red><b>HOW EXTREMELY STUPID IS THIS, RIGOL?</b></font></div>

<div><br><u><b>Step 1: Retrieve scope settings</b></u><br>Some setup information is used in the data conversion later. Therefore, we must query the scope to get the proper parameters.</div>

<div style="margin-left: 40px;">•“:CHAN1:SCAL?” /Return Channel 1 scale = &lt;Vert_Offset&gt;  &nbsp; <font color=red><b>EVERYTHING FROM RIGOL IS BUGGY, EVEN THIS DOCUMENT!</b></font></div>

<div style="margin-left: 120px;">/Alternately, you can replace CHAN1 with CHAN2, if<br>/that is the channel of interest.</div>

<div style="margin-left: 40px;">•“:CHAN1:OFFS?” /Return Channel vertical offset = &lt;Vert_Offset&gt;</div>

<div style="margin-left: 120px;">/Alternately, you can replace CHAN1 with CHAN2, if<br>/that is the channel of interest.</div>

<div style="margin-left: 40px;">•“:TIM:OFFS?” /Return current trigger offset = &lt;Time_Offset&gt;<br>•“:ACQ:SAMP?” /Return acquisition sample rate = &lt;Samp_Rate&gt;</div>

<div><br><u><b>Step 2: Retrieve data and convert</b></u></div>

<div style="margin-left: 40px;">•“:WAV:DATA? CHAN1” /Return data. You will need to read the data</div>

<div style="margin-left: 160px;">/string into your program.</div>

<div style="margin-left: 40px;">•Convert the string to a byte array<br>•Remove
 the first 10 data points from the raw data. These contain unused header
 information. There should be 600 points remaining.<br><br>NOTE: When 
read as unsigned decimals, each byte should have a value of between 15 
and 240. The top of the LCD display of the scope represents byte value 
25 and the bottom is 225.
</div>

<div><br><u><b>Step 3: Convert Amplitude (Volts) :</b></u>
 For each point in the byte array, we will need to perform a 
mathematical manipulation. To do so, you will need the following 
variables:</div>

<div style="margin-left: 40px;">•&lt;Volts_Div&gt;: Returned time/div value from scope<br>•&lt;Raw_Byte&gt; : Raw byte from array<br>•&lt;Vert_Offset&gt;: Returned Vertical offset value from scope</div>

<div><br>For each point, to get the amplitude (A) of the waveform in volts (V):<br><br><i>A(V) = [(240 - &lt;Raw_Byte&gt;) * (&lt;Volts_Div&gt; / 25) - [(&lt;Vert_Offset&gt; + &lt;Volts_Div&gt; * 4.6)]]</i><br><br><u><b>Step 4: Convert Time (s) :</b></u>
 For each point in the byte array, we will need to perform a 
mathematical manipulation. To do so, you will need the following 
variables:</div>

<div style="margin-left: 40px;">•&lt;Time_Offset&gt;: Returned Time offset value from scope<br>•&lt;Samp_Rate&gt;: Returned sample rate value from scope<br>•&lt;Points&gt;: The total number of data points returned from the data query.</div>
<br>To get time in seconds, for each point:<br><br><i>T(s) = &lt;Time_Offset&gt; -[ (&lt;Points&gt; - 10) / (1 / (2*&lt;Samp_Rate&gt;)]</i><br><br>Finally, you can then store or graph the converted data.</div></span>

